{"version":3,"sources":["components/card/Card.component.jsx","components/card-list/CardList.jsx","components/search-box/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","nextProps","nextState","text","this","filteredMonsters","filter","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.409dfce0.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css'\n\n\nconst Card = (props) => (\n  <div className='card-container'>\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2`} />\n\n    <h2 >{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)\n\nexport default Card","import React from 'react';\nimport './CardList.css';\nimport Card from '../card/Card.component.jsx'\n\n\nconst CardList = (props) => {\n\n  return (\n    <div className='card-list'>\n      {props.monsters.map(monster => (\n        <Card monster={monster} key={monster.id}/>\n      ))}\n    </div>\n\n  )\n\n\n\n}\n\nexport default CardList;\n","import React from 'react'\nimport './Search.css'\n\n\nconst SearchBox = ({ placeholder, handleChange }) => (\n\n    <input className='search' type='search' onChange={handleChange} placeholder={placeholder}/>\n\n\n)\n\n\nexport default SearchBox","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/card-list/CardList.jsx'\nimport SearchBox from './components/search-box/Search.jsx'\n\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({\n      monsters: users\n    }))\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      searchField: e.target.value\n    })\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.text !== this.props.text\n  }\n\n\n  render() {\n\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n        handleChange={(this.handleChange)}\n        placeholder={'search monsters'}/>\n\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}