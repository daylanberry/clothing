{"ast":null,"code":"import _objectSpread from \"/Users/daylanberry/Desktop/clothing/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { googleSignInFailure, signInSuccess, signInFailure } from './user.actions';\nimport userActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\n\nfunction* getSnapshopFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const snapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: snapshot.id\n    }, snapshot.data)));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshopFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshopFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\n\nfunction* isUserAuthenticated() {}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/daylanberry/Desktop/clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","googleSignInFailure","signInSuccess","signInFailure","userActionTypes","auth","googleProvider","createUserProfileDocument","getSnapshopFromUserAuth","userAuth","userRef","snapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,mBAAT,EAA8BC,aAA9B,EAA6CC,aAA7C,QAAkE,gBAAlE;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;;AAGA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC1C,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACO,yBAAD,EAA4BE,QAA5B,CAA1B;AACA,UAAME,QAAQ,GAAG,MAAMD,OAAO,CAACE,GAAR,EAAvB;AACA,UAAMd,GAAG,CAACI,aAAa;AAAEW,MAAAA,EAAE,EAAEF,QAAQ,CAACE;AAAf,OAAsBF,QAAQ,CAACG,IAA/B,EAAd,CAAT;AACD,GAJD,CAIE,OAAMC,KAAN,EAAa;AACb,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;;AAED,UAAUC,gBAAV,GAA6B;AAC3B,MAAI;AAAA,iBACa,MAAMX,IAAI,CAACY,eAAL,CAAqBX,cAArB,CADnB;AAAA,UACKY,IADL,QACKA,IADL;;AAEF,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AAED,GAJD,CAIE,OAAMH,KAAN,EAAa;AACb,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;;AAED,OAAO,UAAUI,mBAAV,GAAgC;AACrC,QAAMtB,UAAU,CAACO,eAAe,CAACgB,oBAAjB,EAAuCJ,gBAAvC,CAAhB;AACD;AAGD,OAAO,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAwD;AAC7D,MAAI;AAAA,kBACe,MAAMnB,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CADrB;AAAA,UACMN,IADN,SACMA,IADN;;AAEF,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAMH,KAAN,EAAa;AACbjB,IAAAA,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAH;AACD;AACF;;AAED,UAAUW,mBAAV,GAAgC,CAE/B;;AAED,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAM9B,UAAU,CAACO,eAAe,CAACwB,mBAAjB,EACdP,eADc,CAAhB;AAED;AAED,OAAO,UAAUQ,kBAAV,GAA+B;AACpC,QAAMhC,UAAU,CAACO,eAAe,CAAC0B,kBAAjB,EAAqCJ,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUK,SAAV,GAAsB;AAC3B,QAAMhC,GAAG,CAAC,CACRC,IAAI,CAACmB,mBAAD,CADI,EAERnB,IAAI,CAAC2B,kBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\nimport { googleSignInFailure, signInSuccess, signInFailure } from './user.actions'\nimport userActionTypes from './user.types'\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils'\n\n\nfunction* getSnapshopFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth)\n    const snapshot = yield userRef.get()\n    yield put(signInSuccess({id: snapshot.id, ...snapshot.data}))\n  } catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {user} = yield auth.signInWithPopup(googleProvider)\n    yield getSnapshopFromUserAuth(user)\n\n  } catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\n\nexport function* signInWithEmail({payload: {email, password}}) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password)\n    yield getSnapshopFromUserAuth(user)\n  } catch(error) {\n    put(signInFailure(error))\n  }\n}\n\nfunction* isUserAuthenticated() {\n\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START,\n    signInWithEmail)\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart)\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}