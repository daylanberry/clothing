{"ast":null,"code":"import _objectSpread from \"/Users/daylanberry/Desktop/clothing/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app'; //database\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAkfCustv-z8X9hmSE8oJFydk4aEq_pi2A\",\n  authDomain: \"trans-array-253223.firebaseapp.com\",\n  databaseURL: \"https://trans-array-253223.firebaseio.com\",\n  projectId: \"trans-array-253223\",\n  storageBucket: \"trans-array-253223.appspot.com\",\n  messagingSenderId: \"647533815474\",\n  appId: \"1:647533815474:web:da183ff54e071691b8cbab\",\n  measurementId: \"G-RP7PEME805\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //to get a new document and to randomly get an id\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  }); //fires batch request, returns a promise\n\n  return batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformed = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformed.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; //have access to this do to import auth\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // export const googleProvider = new firebase.auth.GoogleAuthProvider();\n\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE).then(function () {\n  var provider = new firebase.auth.GoogleAuthProvider(); // In memory persistence will be applied to the signed in Google user\n  // even though the persistence was set to 'none' and a page redirect\n  // occurred.\n\n  return firebase.auth().signInWithRedirect(provider);\n}).catch(function (error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message;\n}); //want to always trigger google popup whenever we use google auth provider\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/daylanberry/Desktop/clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformed","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","acc","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","setPersistence","Auth","Persistence","NONE","then","provider","GoogleAuthProvider","signInWithRedirect","catch","errorCode","code","errorMessage","googleProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\n//database\nimport 'firebase/firestore';\nimport 'firebase/auth'\n\nconst config = {\n  apiKey: \"AIzaSyAkfCustv-z8X9hmSE8oJFydk4aEq_pi2A\",\n  authDomain: \"trans-array-253223.firebaseapp.com\",\n  databaseURL: \"https://trans-array-253223.firebaseio.com\",\n  projectId: \"trans-array-253223\",\n  storageBucket: \"trans-array-253223.appspot.com\",\n  messagingSenderId: \"647533815474\",\n  appId: \"1:647533815474:web:da183ff54e071691b8cbab\",\n  measurementId: \"G-RP7PEME805\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n\n      })\n\n    } catch (error) {\n      console.log('error creating user', error.message)\n    }\n  }\n  return userRef\n\n}\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch()\n  objectsToAdd.forEach(obj => {\n    //to get a new document and to randomly get an id\n    const newDocRef = collectionRef.doc()\n    batch.set(newDocRef, obj)\n  })\n  //fires batch request, returns a promise\n  return batch.commit()\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformed = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  })\n\n  return transformed.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection\n    return acc\n  }, {})\n}\n\n\nfirebase.initializeApp(config)\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe()\n      resolve(userAuth)\n    }, reject)\n  })\n\n}\n\n//have access to this do to import auth\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\n// export const googleProvider = new firebase.auth.GoogleAuthProvider();\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n.then(function() {\n  var provider = new firebase.auth.GoogleAuthProvider();\n  // In memory persistence will be applied to the signed in Google user\n  // even though the persistence was set to 'none' and a page redirect\n  // occurred.\n  return firebase.auth().signInWithRedirect(provider);\n})\n.catch(function(error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message;\n});\n\n\n//want to always trigger google popup whenever we use google auth provider\ngoogleProvider.setCustomParameters({prompt: 'select_account'});\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}