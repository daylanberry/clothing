{"ast":null,"code":"import _objectSpread from \"/Users/daylanberry/Desktop/clothing/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app'; //database\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAkfCustv-z8X9hmSE8oJFydk4aEq_pi2A\",\n  authDomain: \"trans-array-253223.firebaseapp.com\",\n  databaseURL: \"https://trans-array-253223.firebaseio.com\",\n  projectId: \"trans-array-253223\",\n  storageBucket: \"trans-array-253223.appspot.com\",\n  messagingSenderId: \"647533815474\",\n  appId: \"1:647533815474:web:da183ff54e071691b8cbab\",\n  measurementId: \"G-RP7PEME805\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt,\n        items: []\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //to get a new document and to randomly get an id\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  }); //fires batch request, returns a promise\n\n  return batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformed = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformed.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; //have access to this do to import auth\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); //want to always trigger google popup whenever we use google auth provider\n//googleProvider.setCustomParameters({prompt: 'select_account'});\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/daylanberry/Desktop/clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","items","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformed","docs","map","data","title","routeName","encodeURI","toLowerCase","id","reduce","acc","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\n//database\nimport 'firebase/firestore';\nimport 'firebase/auth'\n\nconst config = {\n  apiKey: \"AIzaSyAkfCustv-z8X9hmSE8oJFydk4aEq_pi2A\",\n  authDomain: \"trans-array-253223.firebaseapp.com\",\n  databaseURL: \"https://trans-array-253223.firebaseio.com\",\n  projectId: \"trans-array-253223\",\n  storageBucket: \"trans-array-253223.appspot.com\",\n  messagingSenderId: \"647533815474\",\n  appId: \"1:647533815474:web:da183ff54e071691b8cbab\",\n  measurementId: \"G-RP7PEME805\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        items: [],\n        ...additionalData\n\n      })\n\n    } catch (error) {\n      console.log('error creating user', error.message)\n    }\n  }\n  return userRef\n\n}\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch()\n  objectsToAdd.forEach(obj => {\n    //to get a new document and to randomly get an id\n    const newDocRef = collectionRef.doc()\n    batch.set(newDocRef, obj)\n  })\n  //fires batch request, returns a promise\n  return batch.commit()\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformed = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  })\n\n  return transformed.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection\n    return acc\n  }, {})\n}\n\n\nfirebase.initializeApp(config)\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe()\n      resolve(userAuth)\n    }, reject)\n  })\n}\n\n//have access to this do to import auth\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n\n\n//want to always trigger google popup whenever we use google auth provider\n//googleProvider.setCustomParameters({prompt: 'select_account'});\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}