{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport { firestore, getCurrentUser, getUserCartRef } from '../../firebase/firebase.utils';\nimport { selectCartItems } from './cart.selectors';\nimport { selectCurrentUser } from '../user/user.selector';\nimport UserActionTypes from '../user/user.types';\nimport CartActionTypes from './cart.types';\nimport { clearCart, itemFailure, setCartFromFirebase } from './cart.actions';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id); // const snapshot = yield cartRef.get()\n  // const cartItems = snapshot.data().cartItems\n  // yield put(setCartFromFirebase(cartItems))\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onCartChange), call(onSignOutSuccess), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["/Users/daylanberry/Desktop/clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","firestore","getCurrentUser","getUserCartRef","selectCartItems","selectCurrentUser","UserActionTypes","CartActionTypes","clearCart","itemFailure","setCartFromFirebase","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,cAApC,QAA0D,+BAA1D;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,mBAAjC,QAA4D,gBAA5D;AAGA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMZ,GAAG,CAACS,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUI,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMb,MAAM,CAACK,iBAAD,CAAhC;;AACA,MAAIQ,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMX,cAAc,CAACU,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMhB,MAAM,CAACI,eAAD,CAA9B;AACA,YAAMU,OAAO,CAACG,MAAR,CAAe;AAACD,QAAAA;AAAD,OAAf,CAAN;AAED,KALD,CAKE,OAAME,KAAN,EAAa;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAACC,EAAAA,OAAO,EAAEC;AAAV,CAAhC,EAAiD;AACtD,QAAMT,OAAO,GAAG,MAAMX,cAAc,CAACoB,IAAI,CAACR,EAAN,CAApC,CADsD,CAEtD;AACA;AACA;AACD;AAED,OAAO,UAAUS,gBAAV,GAA6B;AAClC,QAAM1B,UAAU,CAACQ,eAAe,CAACmB,gBAAjB,EAAmCd,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUe,YAAV,GAAyB;AAC9B,QAAM5B,UAAU,CAACQ,eAAe,CAACqB,eAAjB,EAAkCN,qBAAlC,CAAhB;AACD;AAED,OAAO,UAAUO,YAAV,GAAyB;AAC9B,QAAM9B,UAAU,CACd,CACES,eAAe,CAACsB,QADlB,EAEEtB,eAAe,CAACuB,WAFlB,EAGEvB,eAAe,CAACwB,oBAHlB,CADc,EAMdnB,oBANc,CAAhB;AAQD;AAID,OAAO,UAAUoB,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CACRC,IAAI,CAAC+B,YAAD,CADI,EAER/B,IAAI,CAAC2B,gBAAD,CAFI,EAGR3B,IAAI,CAAC6B,YAAD,CAHI,CAAD,CAAT;AAMD","sourcesContent":["import { all, call, takeLatest, put, select } from 'redux-saga/effects'\nimport { firestore, getCurrentUser, getUserCartRef } from '../../firebase/firebase.utils'\nimport { selectCartItems } from './cart.selectors'\nimport { selectCurrentUser } from '../user/user.selector'\nimport UserActionTypes from '../user/user.types'\nimport CartActionTypes from './cart.types'\nimport { clearCart, itemFailure, setCartFromFirebase } from './cart.actions'\n\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart())\n}\n\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser)\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id)\n      const cartItems = yield select(selectCartItems)\n      yield cartRef.update({cartItems})\n\n    } catch(error) {\n      console.log(error)\n    }\n  }\n}\n\nexport function* checkCartFromFirebase({payload: user}) {\n  const cartRef = yield getUserCartRef(user.id)\n  // const snapshot = yield cartRef.get()\n  // const cartItems = snapshot.data().cartItems\n  // yield put(setCartFromFirebase(cartItems))\n}\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut)\n}\n\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase)\n}\n\nexport function* onCartChange() {\n  yield takeLatest(\n    [\n      CartActionTypes.ADD_ITEM,\n      CartActionTypes.REMOVE_ITEM,\n      CartActionTypes.CLEAR_ITEM_FROM_CART\n    ],\n    updateCartInFirebase\n  )\n}\n\n\n\nexport function* cartSagas() {\n  yield all([\n    call(onCartChange),\n    call(onSignOutSuccess),\n    call(onUserSignIn)\n\n  ])\n}"]},"metadata":{},"sourceType":"module"}