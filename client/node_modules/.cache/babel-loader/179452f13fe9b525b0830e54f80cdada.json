{"ast":null,"code":"import firebase from 'firebase/app'; //database\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAkfCustv-z8X9hmSE8oJFydk4aEq_pi2A\",\n  authDomain: \"trans-array-253223.firebaseapp.com\",\n  databaseURL: \"https://trans-array-253223.firebaseio.com\",\n  projectId: \"trans-array-253223\",\n  storageBucket: \"trans-array-253223.appspot.com\",\n  messagingSenderId: \"647533815474\",\n  appId: \"1:647533815474:web:da183ff54e071691b8cbab\",\n  measurementId: \"G-RP7PEME805\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // const snapShot = await userRef.get();\n  // if (!snapShot.exists) {\n  //   const { displayName, email } = userAuth\n  //   const createdAt = new Date();\n  //   try {\n  //     await userRef.set({\n  //       displayName,\n  //       email,\n  //       createdAt,\n  //       ...additionalData\n  //     })\n  //   } catch (error) {\n  //     console.log('error creating user', error.message)\n  //   }\n  // }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //to get a new document and to randomly get an id\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  }); //fires batch request, returns a promise\n\n  return batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformed = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformed.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nfirebase.initializeApp(config); //have access to this do to import auth\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); //want to always trigger google popup whenever we use google auth provider\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/daylanberry/Desktop/clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","set","commit","convertCollectionsSnapshotToMap","collections","transformed","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","acc","initializeApp","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB,C,CACA;;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,oCAFC;AAGbC,EAAAA,WAAW,EAAE,2CAHA;AAIbC,EAAAA,SAAS,EAAE,oBAJE;AAKbC,EAAAA,aAAa,EAAE,gCALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAH2E,CAK3E;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA,SAAOH,OAAP;AAED,CA1BM;AA4BP,OAAO,MAAMI,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGR,SAAS,CAACQ,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AAC1B;AACA,UAAMC,SAAS,GAAGL,aAAa,CAACL,GAAd,EAAlB;AACAO,IAAAA,KAAK,CAACI,GAAN,CAAUD,SAAV,EAAqBD,GAArB;AACD,GAJD,EAJwE,CASxE;;AACA,SAAOF,KAAK,CAACK,MAAN,EAAP;AACD,CAXM;AAaP,OAAO,MAAMC,+BAA+B,GAAIC,WAAD,IAAiB;AAC9D,QAAMC,WAAW,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqBjB,GAAG,IAAI;AAAA,sBACrBA,GAAG,CAACkB,IAAJ,EADqB;AAAA,UACtCC,KADsC,aACtCA,KADsC;AAAA,UAC/BC,KAD+B,aAC/BA,KAD+B;;AAG9C,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACH,KAAK,CAACI,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EAAExB,GAAG,CAACwB,EAFH;AAGLL,MAAAA,KAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GATmB,CAApB;AAWA,SAAOL,WAAW,CAACU,MAAZ,CAAmB,CAACC,GAAD,EAAMpB,UAAN,KAAqB;AAC7CoB,IAAAA,GAAG,CAACpB,UAAU,CAACa,KAAX,CAAiBI,WAAjB,EAAD,CAAH,GAAsCjB,UAAtC;AACA,WAAOoB,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAhBM;AAmBPzC,QAAQ,CAAC0C,aAAT,CAAuBzC,MAAvB,E,CAEA;;AACA,OAAO,MAAM0C,IAAI,GAAG3C,QAAQ,CAAC2C,IAAT,EAAb;AACP,OAAO,MAAM7B,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,OAAO,MAAM8B,cAAc,GAAG,IAAI5C,QAAQ,CAAC2C,IAAT,CAAcE,kBAAlB,EAAvB,C,CAEP;;AACAD,cAAc,CAACE,mBAAf,CAAmC;AAACC,EAAAA,MAAM,EAAE;AAAT,CAAnC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAA/B;AAEP,eAAe5C,QAAf","sourcesContent":["import firebase from 'firebase/app'\n//database\nimport 'firebase/firestore';\nimport 'firebase/auth'\n\nconst config = {\n  apiKey: \"AIzaSyAkfCustv-z8X9hmSE8oJFydk4aEq_pi2A\",\n  authDomain: \"trans-array-253223.firebaseapp.com\",\n  databaseURL: \"https://trans-array-253223.firebaseio.com\",\n  projectId: \"trans-array-253223\",\n  storageBucket: \"trans-array-253223.appspot.com\",\n  messagingSenderId: \"647533815474\",\n  appId: \"1:647533815474:web:da183ff54e071691b8cbab\",\n  measurementId: \"G-RP7PEME805\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n\n  // const snapShot = await userRef.get();\n\n  // if (!snapShot.exists) {\n  //   const { displayName, email } = userAuth\n  //   const createdAt = new Date();\n\n  //   try {\n  //     await userRef.set({\n  //       displayName,\n  //       email,\n  //       createdAt,\n  //       ...additionalData\n\n  //     })\n\n  //   } catch (error) {\n  //     console.log('error creating user', error.message)\n  //   }\n  // }\n  return userRef\n\n}\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch()\n  objectsToAdd.forEach(obj => {\n    //to get a new document and to randomly get an id\n    const newDocRef = collectionRef.doc()\n    batch.set(newDocRef, obj)\n  })\n  //fires batch request, returns a promise\n  return batch.commit()\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformed = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  })\n\n  return transformed.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection\n    return acc\n  }, {})\n}\n\n\nfirebase.initializeApp(config)\n\n//have access to this do to import auth\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n\n//want to always trigger google popup whenever we use google auth provider\ngoogleProvider.setCustomParameters({prompt: 'select_account'});\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}