{"ast":null,"code":"import { all, call, takeLatest, put } from 'redux-saga/effects';\nimport { firestore, getCurrentUser } from '../../firebase/firebase.utils';\nimport UserActionTypes from '../user/user.types';\nimport CartActionTypes from './cart.types';\nimport { clearCart, itemFailure } from './cart.actions';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* getItemRef() {\n  const _ref = yield getCurrentUser(),\n        uid = _ref.uid;\n\n  const userRef = yield firestore.collection('users').doc(uid);\n  const itemRef = yield userRef.collection('items').doc(payload.id.toString());\n  return itemRef;\n}\nexport function* addItemToUserCollection({\n  payload\n}) {\n  try {\n    const _ref2 = yield getCurrentUser(),\n          uid = _ref2.uid;\n\n    const userRef = yield firestore.collection('users').doc(uid);\n    const itemRef = yield userRef.collection('items').doc(payload.id.toString());\n    const snapshot = yield itemRef.get();\n    const itemInfo = yield snapshot.data();\n    const batch = yield firestore.batch();\n\n    if (!snapshot.exists) {\n      yield batch.set(itemRef, {\n        items: payload,\n        quantity: 1\n      });\n    } else {\n      itemInfo.quantity++;\n      yield batch.update(itemRef, {\n        quantity: itemInfo.quantity\n      });\n    }\n\n    yield batch.commit();\n  } catch (err) {\n    yield itemFailure(err);\n  }\n}\nexport function* onAddItem() {\n  yield takeLatest(CartActionTypes.ADD_ITEM, addItemToUserCollection);\n}\nexport function* removeItemQuantity({\n  payload\n}) {\n  try {\n    const _ref3 = yield getCurrentUser(),\n          uid = _ref3.uid;\n\n    const userRef = yield firestore.collection('users').doc(uid);\n    const itemRef = yield userRef.collection('items').doc(payload.id.toString());\n    const snapshot = yield itemRef.get();\n    const itemInfo = yield snapshot.data();\n    itemInfo.quantity--;\n    const updated = yield itemRef.update({\n      quantity: itemInfo.quantity\n    });\n  } catch (err) {\n    yield itemFailure(err);\n  }\n}\nexport function* removeItem() {\n  yield takeLatest(CartActionTypes.REMOVE_ITEM, removeItemQuantity);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onAddItem), call(removeItem)]);\n}","map":{"version":3,"sources":["/Users/daylanberry/Desktop/clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","firestore","getCurrentUser","UserActionTypes","CartActionTypes","clearCart","itemFailure","clearCartOnSignOut","onSignOutSuccess","SIGN_OUT_SUCCESS","getItemRef","uid","userRef","collection","doc","itemRef","payload","id","toString","addItemToUserCollection","snapshot","get","itemInfo","data","batch","exists","set","items","quantity","update","commit","err","onAddItem","ADD_ITEM","removeItemQuantity","updated","removeItem","REMOVE_ITEM","cartSagas"],"mappings":"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","sourcesContent":["import { all, call, takeLatest, put } from 'redux-saga/effects'\nimport { firestore, getCurrentUser } from '../../firebase/firebase.utils'\nimport UserActionTypes from '../user/user.types'\nimport CartActionTypes from './cart.types'\nimport { clearCart, itemFailure } from './cart.actions'\n\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart())\n}\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut)\n}\n\nexport function* getItemRef() {\n  const {uid} = yield getCurrentUser()\n    const userRef = yield firestore.collection('users').doc(uid)\n    const itemRef = yield userRef.collection('items').doc(payload.id.toString())\n\n    return itemRef\n}\n\nexport function* addItemToUserCollection({payload}) {\n  try {\n    const {uid} = yield getCurrentUser()\n    const userRef = yield firestore.collection('users').doc(uid)\n    const itemRef = yield userRef.collection('items').doc(payload.id.toString())\n\n    const snapshot = yield itemRef.get()\n    const itemInfo = yield snapshot.data()\n\n    const batch = yield firestore.batch()\n    if (!snapshot.exists) {\n      yield batch.set(itemRef, {\n        items: payload,\n        quantity: 1\n      })\n    } else {\n      itemInfo.quantity++\n      yield batch.update(itemRef, {\n        quantity: itemInfo.quantity\n      })\n    }\n\n    yield batch.commit()\n\n  } catch(err) {\n    yield itemFailure(err)\n  }\n}\n\nexport function* onAddItem() {\n  yield takeLatest(CartActionTypes.ADD_ITEM, addItemToUserCollection)\n}\n\nexport function* removeItemQuantity({payload}) {\n  try {\n    const {uid} = yield getCurrentUser()\n    const userRef = yield firestore.collection('users').doc(uid)\n    const itemRef = yield userRef.collection('items').doc(payload.id.toString())\n    const snapshot = yield itemRef.get()\n    const itemInfo = yield snapshot.data()\n    itemInfo.quantity--\n\n    const updated = yield itemRef.update({\n      quantity: itemInfo.quantity\n    })\n\n\n  } catch(err) {\n    yield itemFailure(err)\n  }\n}\n\n\nexport function* removeItem() {\n  yield takeLatest(CartActionTypes.REMOVE_ITEM, removeItemQuantity)\n}\n\n\n\nexport function* cartSagas() {\n  yield all([\n    call(onSignOutSuccess),\n    call(onAddItem),\n    call(removeItem)\n  ])\n}"]},"metadata":{},"sourceType":"module"}