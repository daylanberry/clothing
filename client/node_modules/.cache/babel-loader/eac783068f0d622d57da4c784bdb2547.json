{"ast":null,"code":"import _objectSpread from \"/Users/daylanberry/Desktop/clothing/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { googleSignInFailure, signInSuccess, signInFailure, signOutSuccess, signOutFailure, signupSuccess, signupFailure } from './user.actions';\nimport userActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport axios from 'axios';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport keys from '../../keys.js';\n\nconst createUser = user => {\n  axios.post('/users', {\n    username: user\n  }).then(res => console.log(res)).catch(err => console.log(err));\n};\n\nconst test = userId => {\n  const chatManager = new ChatManager({\n    instanceLocator: keys.instanceLocator,\n    userId: userId,\n    tokenProvider: new TokenProvider({\n      url: keys.tokenUrl\n    })\n  });\n  chatManager.connect().then(currentUser => {\n    this.currentUser = currentUser;\n    this.getRooms();\n  }).catch(err => console.log(err));\n};\n\nfunction* getSnapshopFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const snapshot = yield userRef.get();\n    createUser(snapshot.data().displayName);\n    yield put(signInSuccess(_objectSpread({\n      id: snapshot.id\n    }, snapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshopFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshopFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshopFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOutUser() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onUserSignupStart({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    yield put(signupSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signupFailure(error));\n  }\n}\nexport function* signInAfterSignup({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshopFromUserAuth(user, additionalData);\n}\nexport function* onSignupSuccess() {\n  yield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignup);\n}\nexport function* signupStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, onUserSignupStart);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(signOutUser), call(signupStart), call(onSignupSuccess)]);\n}","map":{"version":3,"sources":["/Users/daylanberry/Desktop/clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","googleSignInFailure","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signupSuccess","signupFailure","userActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","axios","ChatManager","TokenProvider","keys","createUser","user","post","username","then","res","console","log","catch","err","test","userId","chatManager","instanceLocator","tokenProvider","url","tokenUrl","connect","currentUser","getRooms","getSnapshopFromUserAuth","userAuth","additionalData","userRef","snapshot","get","data","displayName","id","error","signInWithGoogle","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","signOutUser","SIGN_OUT_START","onUserSignupStart","createUserWithEmailAndPassword","signInAfterSignup","onSignupSuccess","SIGN_UP_SUCCESS","signupStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\nimport { googleSignInFailure, signInSuccess, signInFailure, signOutSuccess, signOutFailure, signupSuccess, signupFailure } from './user.actions'\nimport userActionTypes from './user.types'\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'\n\nimport axios from 'axios'\nimport { ChatManager, TokenProvider} from '@pusher/chatkit-client'\nimport keys from '../../keys.js'\n\nconst createUser = (user) => {\n  axios.post('/users', {\n    username: user\n  })\n  .then((res) => console.log(res))\n  .catch(err => console.log(err))\n}\n\nconst test = (userId) => {\n  const chatManager = new ChatManager({\n    instanceLocator: keys.instanceLocator,\n    userId: userId,\n    tokenProvider: new TokenProvider({url: keys.tokenUrl})\n  })\n\n  chatManager.connect()\n  .then(currentUser => {\n    this.currentUser = currentUser\n    this.getRooms()\n  })\n  .catch(err => console.log(err))\n}\n\n\nfunction* getSnapshopFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData)\n    const snapshot = yield userRef.get()\n    createUser(snapshot.data().displayName)\n\n    yield put(signInSuccess({id: snapshot.id, ...snapshot.data()}))\n  } catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {user} = yield auth.signInWithPopup(googleProvider)\n    yield getSnapshopFromUserAuth(user)\n\n  } catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\n\nexport function* signInWithEmail({payload: {email, password}}) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password)\n    yield getSnapshopFromUserAuth(user)\n  } catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser()\n    if (!userAuth) return;\n    yield getSnapshopFromUserAuth(userAuth)\n\n\n  } catch(error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* signOut() {\n  try {\n    yield auth.signOut()\n    yield put(signOutSuccess())\n  } catch(error) {\n    yield put(signOutFailure(error))\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START,\n    signInWithEmail)\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* signOutUser() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut)\n}\n\n\nexport function* onUserSignupStart({payload: {displayName, email, password }}) {\n\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password)\n    yield put(signupSuccess({user, additionalData: {displayName}}))\n\n  } catch(error) {\n    yield put(signupFailure(error))\n  }\n}\n\nexport function* signInAfterSignup({payload: { user, additionalData }}) {\n  yield getSnapshopFromUserAuth(user, additionalData)\n}\n\nexport function* onSignupSuccess() {\n  yield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignup)\n}\n\n\nexport function* signupStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, onUserSignupStart)\n}\n\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(signOutUser),\n    call(signupStart),\n    call(onSignupSuccess)\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}